name: build

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  POETRY_VERSION: "1.3.1"

jobs:
  deploy:
    runs-on: ubuntu-latest # ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}

      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
      - name: Cache Packages
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache folder
        uses: actions/cache@v3
        id: cache-folder
        with:
          path: |
            ~/.cache/cartes/
          key: ${{ runner.os }}-${{ matrix.python-version }}-cache_cartes

      - name: Display Python version
        run: poetry run python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgdal-dev libgeos-dev libproj-dev proj-bin proj-data
          # upgrade to proj>=8.0 for Cartopy 0.20, no longer necessary with ubuntu 22.04
          # git clone https://github.com/OSGeo/PROJ
          # cd PROJ
          # git checkout 8.2.1
          # mkdir build; cd build
          # cmake ..
          # cmake --build .
          # sudo cmake --build . --target install
          # cd ../..
          # https://stackoverflow.com/a/73080089
          poetry config experimental.new-installer false
          poetry install

      - name: Style checking
        run: |
          poetry run flake8 cartes
          poetry run isort --check-only cartes
          poetry run black --check cartes

      - name: Type checking
        run: |
          poetry run mypy cartes

      - name: Run tests
        env:
          LD_LIBRARY_PATH: /usr/local/lib
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run pytest --cov --cov-report term-missing --ignore=cartes/__main__.py

      - uses: codecov/codecov-action@v3
